extends layout

block content
    h1 spatialaddressbook
    //p click on the map to add a point
    .wrapper
        #map
        .legend_title
            span#legend_items categories
        .legend
            //- we are passing in an object called categories, which we prepared in index.js
            each category, i in categories
                input(id=category, type='checkbox', checked)
                span#legend_items #{category}
                br

        .entrypanel
          p add data
            label.switch
              input(id='toggleButton', type='checkbox')
              span.slider.rounded
          .container
              form(method='post' action='/submitted')
                .row
                  .col-25
                      label(for='category') category
                  .col-75
                      select(id='category', name='category')
                          option(value='friend', selected='') friend
                          option(value='colleague') colleague
                .row
                  .col-25
                    label(for='firstname_input') first name
                  .col-75
                    input(id='firstname_input', type='text', name='firstname', placeholder='first name' required)
                .row
                  .col-25
                    label(for='lastname_input') last name
                  .col-75
                    input(id='lastname_input', type='text', name='lastname', placeholder='last name' required)
                .row
                  .col-25
                    label(for='contact_details_input') contact
                  .col-75
                    input(id='contact_details_input', type='text', name='contact_details', placeholder='contact details')
                .row
                  .col-25
                    label latitude
                  .col-75
                    input(readonly id='lat_input', type='text', name='lat', placeholder='please click the map first' required)
                .row
                  .col-25
                    label longitude
                  .col-75
                    input(readonly id='lng_input', type='text', name='lng', placeholder='please click the map first' required)
                .row
                  input(class='bluebutton', value='add to database', type='submit', name='add points')

        .infopanel
            h2 details
            #firstname
            #lastname
            #contactdetails


    script(type='text/javascript').
        var map = L.map('map').setView([#{lat}, #{lng}], 5);
        L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        $.getJSON('/maplayers', function (result) {
            $.each(result, function (i, mlayer) {
                $.getJSON('/mapjson/' + mlayer.properties.category, function (data) {
                    addLayer(data, mlayer.properties.category)
                });
            });
        });

        // clicking on the map adds a marker
        function clickToAddMarker() {
            addMarker = map.on('click', onMapClick);
            var addedMarkers = [];

            function onMapClick(e) {
                var submittedLat = (e.latlng.lat).toFixed(5);
                var submittedLng = (e.latlng.lng).toFixed(5);

                document.getElementById('lat_input').value = submittedLat;
                document.getElementById('lng_input').value = submittedLng;

                // data structure of the new feature with retrieved click coordinates
                var clickPointFeature = {
                    type: "Feature",
                    geometry: {
                        type: "Point",
                        "coordinates": [submittedLat, submittedLng]
                    },
                    "properties": {},
                }

                // if the array contains more than one marker, remove the previous one
                if (addedMarkers.length > 0) {
                    map.removeLayer(addedMarkers.pop());
                }
                var addressMarker;

                // add the marker to the addedMarkers array
                L.geoJson(clickPointFeature, {
                    pointToLayer: function (feature, latlng) {
                        addressMarker = L.circleMarker(e.latlng);
                        addedMarkers.push(addressMarker);

                        return addressMarker;
                    }

                }).addTo(map);

                    // console.log(clickPointFeature);

                }
            };

        function addLayer(layer, name) {
            var address_layer;
            address_layer = L.geoJson(layer, {
                pointToLayer: function (feature, latlng) {
                    return L.circleMarker(latlng, layer.properties);
                },
                style: function (feature) {
                    switch (feature.properties.category) {
                        case 'colleague':
                            return {
                                fillColor: "#e9bc3b",
                                color: "#ac8613",
                                radius: 5,
                                opacity: 1,
                                fillOpacity: 0.8
                            };
                        case 'friend':
                            return {
                                fillColor: "#0099ff",
                                color: "#005f9d",
                                radius: 5,
                                opacity: 1,
                                fillOpacity: 0.8
                            };
                    }
                },
                onEachFeature: function (feature, layer) {
                    layer.bindTooltip(feature.properties.firstname);
                    layer.on('click', function(e) {

                    // find the dom element
                    var firstnameElement = document.getElementById("firstname")
                    var lastnameElement = document.getElementById("lastname")
                    var contactdetailsElement = document.getElementById("contactdetails")
                    
                    // retrieve and display contents
                    firstnameElement.textContent = feature.properties.firstname
                    lastnameElement.textContent = feature.properties.lastname
                    contactdetailsElement.textContent = feature.properties.contact_details

                })
                }
            });

            address_layer.addTo(map);

            $('#' + name).click(function (e) {
                if (map.hasLayer(address_layer)) {
                    map.removeLayer(address_layer);
                } else {
                    map.addLayer(address_layer);
                }
            });

            // getting the toggle button to work
            var button = document.getElementById('toggleButton').addEventListener("click", toggleAddMarkers);

            function toggleAddMarkers() {
                if (document.getElementById('toggleButton').checked) {
                    clickToAddMarker();
                } else {
                    location.reload();
                }
            }

        }
